compose       = (L f. (L g. (L x. (g (f x)))))
flip          = (L f. (L x. (L y. ((f y) x))))
zero          = (L f. (L x. x))
one           = (L f. (L x. (f x)))
two           = (L f. (L x. (f (f x))))
three         = (L f. (L x. (f (f (f x)))))
four          = (L f. (L x. (f (f (f (f x))))))
five          = (L f. (L x. (f (f (f (f (f x)))))))
six           = (L f. (L x. (f (f (f (f (f (f x))))))))
seven         = (L f. (L x. (f (f (f (f (f (f (f x)))))))))
eight         = (L f. (L x. (f (f (f (f (f (f (f (f x))))))))))
nine          = (L f. (L x. (f (f (f (f (f (f (f (f (f x)))))))))))
ten           = (L f. (L x. (f (f (f (f (f (f (f (f (f (f x))))))))))))
true          = (L f. (L x. f))
false         = (L f. (L x. x))
not           = (L p. ((p false) true))
or            = (L p. (L q. ((p true) q)))
and           = (L p. (L q. ((p q) false)))
mult          = (L m. (L n. (L f. (m (n f)))))
succ          = (L n. (L f. (L x. (f ((n f) x)))))
plus          = (L m. (L n. (L f. (L x. ((m f) ((n f) x))))))
ifthenelse    = (L p. (L t. (L f. ((p t) f))))
iszero        = (L n. ((n (L x. false)) true))
predhelper    = (L g. (L k. (((iszero (g one)) k) ((plus (g k)) one))))
pred          = (L n. (((n predhelper) (L v. zero)) zero))
sub           = (L m. (L n. ((n pred) m)))
factorial     = (L n. (((ifthenelse (iszero n)) one) ((mult n) (factorial (pred n)))))
leq           = (L m. (L n. (iszero ((sub m) n))))
eq            = (L m. (L n. ((and ((leq m) n)) ((leq n) m))))
le            = (L m. (L n. ((and ((leq m) n)) (not ((eq m) n)))))
fib           = (L n. (((ifthenelse ((leq n) one)) one) ((plus (fib (pred n))) (fib ((sub n) two)))))
pair          = (L x.(L y. (L f. ((f x) y))))
fst           = (L p. (p true))
snd           = (L p. (p false))
nil           = (L x. true)
isnil         = (L p.(p (L x. (L y. false))))
length        = (L list. (((ifthenelse (isnil list)) zero) (succ (length (snd list)))))
map           = (L f. (L list. (((ifthenelse (isnil list)) nil) ((pair (f (fst list))) ((map f) (snd list))))))
filter        = (L f. (L list. (((ifthenelse (isnil list)) nil) (((ifthenelse (f (fst list))) ((pair (fst list)) ((filter f) (snd list)))) ((filter f) (snd list))))))
range         = (L low. (L high. (((ifthenelse (not ((le low) high))) nil) ((pair low) ((range (succ low)) high)))))
atindex       = (L index. (L list. (((ifthenelse (iszero index)) (fst list)) ((atindex (pred index)) (snd list)))))
curry         = (L f. (L x. (L y. (f ((pair x) y)))))
uncurry       = (L f. (L p. ((f (fst p)) (snd p))))

(length ((range zero) five))
